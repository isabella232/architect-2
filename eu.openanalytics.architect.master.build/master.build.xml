<project name="eu.openanalytics.architect.master.build" default="full-build">

	<!--
		The MASTER build consists of the following steps:
		
		1. Compile R (win32)
		2. Compile rj and rj.gd (win32)
		3. Build features r.server and r.libs.rj
		4. Build product Architect
		5. Make Architect installers
		6. Make a zipped p2 update site
	-->
	
	<property file="master.build.properties" />

	<path id="equinox.launcher.path">
		<fileset dir="${baseLocation}/plugins">
			<include name="org.eclipse.equinox.launcher_*.jar" />
		</fileset>
	</path>
	<property name="equinox.launcher" refid="equinox.launcher.path" />

	<target name="compile-r" unless="${skip.r.compilation}">
		<ant dir="../eu.openanalytics.r.server.build" inheritall="false">
			<property name="r.version" value="${r.version}"/>
			<property name="rtools.dir" value="${rtools.dir}"/>
		</ant>
		<delete dir="../eu.openanalytics.architect.r.server.win32.win32/R"/>
		<mkdir dir="../eu.openanalytics.architect.r.server.win32.win32/R"/>
		<copy todir="../eu.openanalytics.architect.r.server.win32.win32/R">
			<fileset dir="${r.output.dir}/${r.version}"/>
		</copy>
		<replaceregexp file="../eu.openanalytics.architect.r.server/about.ini" match="Version: R-(.*)" replace="Version: ${r.version}\\\\n\\\\" />
	</target>
	
	<target name="compile-rj" unless="${skip.rj.compilation}">
		<ant dir="../eu.openanalytics.r.libs.rj.build" inheritall="false">
			<property name="r.version" value="${r.version}"/>
			<property name="rj.version" value="${rj.version}"/>
			<property name="rj.gd.version" value="${rj.gd.version}"/>
			<property name="rtools.dir" value="${rtools.dir}"/>
		</ant>
		<delete dir="../eu.openanalytics.architect.r.libs.rj.win32.win32/libs"/>
		<mkdir dir="../eu.openanalytics.architect.r.libs.rj.win32.win32/libs"/>
		<copy todir="../eu.openanalytics.architect.r.libs.rj.win32.win32/libs">
			<fileset dir="${rj.output.dir}"/>
		</copy>
		<replaceregexp file="../eu.openanalytics.architect.r.libs.rj/about.ini" match="Version: rj(.*)" replace="Version: rj ${rj.version}; rj.gd ${rj.gd.version}\\\\n\\\\" />
	</target>
		
	<target name="build-architect-features">
		<!-- Workaround: Modifying property files directly because <property> tags don't work when calling PDE build scripts. -->
		
		<replaceregexp file="../eu.openanalytics.architect.r.server.build/build.properties" match="statet.repo.path=(.*)" replace="statet.repo.path=${statet.repo.path}" />
		<replaceregexp file="../eu.openanalytics.architect.r.server.build/build.properties" match="baseLocation=(.*)" replace="baseLocation=${baseLocation}" />
		<replaceregexp file="../eu.openanalytics.architect.r.server.build/build.properties" match="p2.build.repo=(.*)" replace="p2.build.repo=${p2.build.repo}" />
		<ant dir="../eu.openanalytics.architect.r.server.build" inheritall="false"/>

		<replaceregexp file="../eu.openanalytics.architect.r.libs.rj.build/build.properties" match="statet.repo.path=(.*)" replace="statet.repo.path=${statet.repo.path}" />
		<replaceregexp file="../eu.openanalytics.architect.r.libs.rj.build/build.properties" match="baseLocation=(.*)" replace="baseLocation=${baseLocation}" />
		<replaceregexp file="../eu.openanalytics.architect.r.libs.rj.build/build.properties" match="p2.build.repo=(.*)" replace="p2.build.repo=${p2.build.repo}" />
		<ant dir="../eu.openanalytics.architect.r.libs.rj.build" inheritall="false"/>
		
		<replaceregexp file="../eu.openanalytics.architect.build/build.properties" match="statet.repo.path=(.*)" replace="statet.repo.path=${statet.repo.path}" />
		<replaceregexp file="../eu.openanalytics.architect.build/build.properties" match="baseLocation=(.*)" replace="baseLocation=${baseLocation}" />
		<replaceregexp file="../eu.openanalytics.architect.build/build.properties" match="p2.build.repo=(.*)" replace="p2.build.repo=${p2.build.repo}" />
		<replaceregexp file="../eu.openanalytics.architect.build/build.properties" match="rtools.dir=(.*)" replace="rtools.dir=${rtools.dir}" />
		<replaceregexp file="../eu.openanalytics.architect.build/build.properties" match="pandoc.dir=(.*)" replace="pandoc.dir=${pandoc.dir}" />
		<ant dir="../eu.openanalytics.architect.build" inheritall="false"/>
		
		<antcall target="categorize-architect-features" />
	</target>
	
	<target name="categorize-architect-features">
		<!-- Apply categorization to the p2 repository -->
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.publisher.CategoryPublisher" />
			<arg value="-metadataRepository" />
			<arg value="${p2.build.repo}" />
			<arg value="-categoryDefinition" />
			<arg value="file:${basedir}/category.xml" />
			<arg value="-categoryQualifier" />
			<arg value="-compress" />
			<classpath>
				<pathelement location="${equinox.launcher}" />
			</classpath>
		</java>
	</target>

	<target name="build-architect-product">
		<echo file="../eu.openanalytics.architect/p2.inf" append="true">${preconfigured.update.sites}</echo>
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="statet.repo.path=(.*)" replace="statet.repo.path=${statet.repo.path}" />
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="baseLocation=(.*)" replace="baseLocation=${baseLocation}" />
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="extraIUs=(.*)" replace="extraIUs=${extraIUs}" />
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="architect.repo.path=(.*)" replace="architect.repo.path=${p2.build.repo}" />
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="cdt.repo.path=(.*)" replace="cdt.repo.path=${cdt.repo.path}" />
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="egit.repo.path=(.*)" replace="egit.repo.path=${egit.repo.path}" />
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="ptp.repo.path=(.*)" replace="ptp.repo.path=${ptp.repo.path}" />
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="mylyn.repo.path=(.*)" replace="mylyn.repo.path=${mylyn.repo.path}" />
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="emf.repo.path=(.*)" replace="emf.repo.path=${emf.repo.path}" />
		<replaceregexp file="../eu.openanalytics.architect.product.build/build.properties" match="fontsize.repo.path=(.*)" replace="fontsize.repo.path=${fontsize.repo.path}" />
		<ant dir="../eu.openanalytics.architect.product.build" inheritall="false"/>
	</target>

	<target name="make-installers">
		<ant dir="../eu.openanalytics.architect.installer" inheritall="false" target="make-installer"/>
	</target>
	
	<target name="zip-p2-site">
		<!-- Install the StatET features into the p2 repo, so they are included in the archived update site -->
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher" />
			<arg value="-metadataRepository" />
			<arg value="${p2.build.repo}" />
			<arg value="-artifactRepository" />
			<arg value="${p2.build.repo}" />
			<arg value="-source" />
			<arg value="${statet.repo.path}/site-statet/" />
			<arg value="-compress" />
			<arg value="-publishArtifacts" />
			<arg value="-append" />
			<classpath>
				<pathelement location="${equinox.launcher}" />
			</classpath>
		</java>
		<!-- Install the CDT features into the p2 repo, so they are included in the archived update site -->
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher" />
			<arg value="-metadataRepository" />
			<arg value="${p2.build.repo}" />
			<arg value="-artifactRepository" />
			<arg value="${p2.build.repo}" />
			<arg value="-source" />
			<arg value="${cdt.repo.path}/" />
			<arg value="-compress" />
			<arg value="-publishArtifacts" />
			<arg value="-append" />
			<classpath>
				<pathelement location="${equinox.launcher}" />
			</classpath>
		</java>
		<zip destfile="${architect.build.dir}/${p2.build.repo.zip}">
			<fileset dir="${p2.build.repo.path}" />
		</zip>
	</target>
	
	<target name="full-build">
		<delete dir="${architect.build.dir}"/>
		<antcall target="compile-r"/>
		<antcall target="compile-rj"/>
		<antcall target="build-architect-features"/>
		<antcall target="build-architect-product"/>
		<antcall target="make-installers"/>
		<antcall target="zip-p2-site"/>
		
		<delete dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<copy todir="${dist.dir}">
			<fileset dir="${architect.build.dir}">
				<include name="*.exe"/>
				<include name="*.zip"/>
			</fileset>
		</copy>
	</target>
</project>